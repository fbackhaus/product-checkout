/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.novicap.checkout;

import com.novicap.checkout.model.*;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

class CheckoutTest {

    private Checkout checkout;

    @Test
    void createCheckoutWithoutDiscounts() {
        checkout = new Checkout();
        whenIScanTheseProducts(ProductCode.VOUCHER, ProductCode.VOUCHER);
        thenTheExpectedPriceMatchesTheTotal(new BigDecimal(10));

        whenIScanTheseProducts(ProductCode.VOUCHER, ProductCode.TSHIRT, ProductCode.VOUCHER,
                ProductCode.VOUCHER, ProductCode.MUG, ProductCode.TSHIRT, ProductCode.TSHIRT);
        thenTheExpectedPriceMatchesTheTotal(new BigDecimal("82.50"));
    }

    @Test
    void createCheckoutWithSpecialDiscount() {
        List<Discount> discounts = new ArrayList<>();
        discounts.add(getSpecialDiscount(ProductCode.VOUCHER, new BigDecimal(5), 2, 1));

        givenAListOfDiscountRules(discounts);
        whenIScanTheseProducts(ProductCode.VOUCHER, ProductCode.VOUCHER);
        thenTheExpectedPriceMatchesTheTotal(new BigDecimal(5));
    }

    @Test
    void createCheckoutWithBulkPurchaseDiscount() {
        List<Discount> discounts = new ArrayList<>();
        discounts.add(getBulkPurchaseDiscount(ProductCode.TSHIRT, new BigDecimal(20), 3, new BigDecimal(1).setScale(2)));

        givenAListOfDiscountRules(discounts);
        whenIScanTheseProducts(ProductCode.TSHIRT, ProductCode.TSHIRT, ProductCode.TSHIRT);
        thenTheExpectedPriceMatchesTheTotal(new BigDecimal(57));
    }

    @Test
    void testCheckoutWithChallengeExamples() {
        List<Discount> discounts = new ArrayList<>();
        discounts.add(getSpecialDiscount(ProductCode.VOUCHER, new BigDecimal(5), 2, 1));
        discounts.add(getBulkPurchaseDiscount(ProductCode.TSHIRT, new BigDecimal(20), 3, new BigDecimal(1).setScale(2)));


        givenAListOfDiscountRules(discounts);
        whenIScanTheseProducts(ProductCode.VOUCHER, ProductCode.TSHIRT, ProductCode.MUG);
        thenTheExpectedPriceMatchesTheTotal(new BigDecimal("32.50"));

        whenIScanTheseProducts(ProductCode.VOUCHER, ProductCode.TSHIRT, ProductCode.VOUCHER);
        thenTheExpectedPriceMatchesTheTotal(new BigDecimal(25));

        whenIScanTheseProducts(ProductCode.TSHIRT, ProductCode.TSHIRT, ProductCode.TSHIRT,
                ProductCode.VOUCHER, ProductCode.TSHIRT);
        thenTheExpectedPriceMatchesTheTotal(new BigDecimal(81));

        whenIScanTheseProducts(ProductCode.VOUCHER, ProductCode.TSHIRT, ProductCode.VOUCHER,
                ProductCode.VOUCHER, ProductCode.MUG, ProductCode.TSHIRT, ProductCode.TSHIRT);
        thenTheExpectedPriceMatchesTheTotal(new BigDecimal("74.50"));
    }

    @Test
    void createCheckoutWith3for2SpecialDiscount() {
        List<Discount> discounts = new ArrayList<>();
        discounts.add(getSpecialDiscount(ProductCode.MUG, new BigDecimal("7.50"), 3, 2));

        givenAListOfDiscountRules(discounts);
        whenIScanTheseProducts(ProductCode.MUG, ProductCode.MUG);
        thenTheExpectedPriceMatchesTheTotal(new BigDecimal(15));

        givenAListOfDiscountRules(discounts);
        whenIScanTheseProducts(ProductCode.MUG, ProductCode.MUG, ProductCode.MUG);
        thenTheExpectedPriceMatchesTheTotal(new BigDecimal(15));

        givenAListOfDiscountRules(discounts);
        whenIScanTheseProducts(ProductCode.MUG, ProductCode.MUG, ProductCode.MUG, ProductCode.MUG);
        thenTheExpectedPriceMatchesTheTotal(new BigDecimal("22.50"));

        givenAListOfDiscountRules(discounts);
        whenIScanTheseProducts(ProductCode.MUG, ProductCode.MUG, ProductCode.MUG, ProductCode.MUG, ProductCode.MUG);
        thenTheExpectedPriceMatchesTheTotal(new BigDecimal(30));

        givenAListOfDiscountRules(discounts);
        whenIScanTheseProducts(ProductCode.MUG, ProductCode.MUG, ProductCode.MUG,
                ProductCode.MUG, ProductCode.MUG, ProductCode.MUG);
        thenTheExpectedPriceMatchesTheTotal(new BigDecimal(30));
    }

    private SpecialDiscount getSpecialDiscount(ProductCode productCode, BigDecimal listPrice, int minToPurchase, int itemsToCharge) {
        Product product = Product.builder()
                .code(productCode)
                .price(listPrice)
                .build();

        return SpecialDiscount.builder()
                .product(product)
                .minimumNumberOfItemsToPurchase(minToPurchase)
                .numberOfItemsToCharge(itemsToCharge)
                .build();
    }

    private BulkPurchaseDiscount getBulkPurchaseDiscount(ProductCode productCode, BigDecimal listPrice, int minToPurchase, BigDecimal discountPerUnit) {
        Product product = Product.builder()
                .code(productCode)
                .price(listPrice)
                .build();

        return BulkPurchaseDiscount.builder()
                .product(product)
                .minimumNumberOfItems(minToPurchase)
                .discountPerUnit(discountPerUnit)
                .build();
    }

    private void givenAListOfDiscountRules(List<Discount> discountRules) {
        checkout = new Checkout(discountRules);
    }

    private void whenIScanTheseProducts(ProductCode... productCodes) {
        for (ProductCode productCode : productCodes) {
            checkout.scan(productCode);
        }
    }


    private void thenTheExpectedPriceMatchesTheTotal(BigDecimal expectedPrice) {
        Assertions.assertEquals(expectedPrice.setScale(2), checkout.total());
    }
}
